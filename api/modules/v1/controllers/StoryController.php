<?php

namespace api\modules\v1\controllers;

use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;
use yii\rest\ActiveController;
use yii\web\UploadedFile;
use yii\helpers\Url;
use yii\web\Response;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\AccessControl;

use common\models\Skip;
use common\models\Stories;
use common\models\Report;
use common\models\Conversation;
use common\models\User;


class StoryController extends ActiveController
{
    public $modelClass = 'common\models\Stories';
    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'data',
    ];

    public function actions()
    {
        $actions = parent::actions();
        // disable the "delete" and "create" actions
        unset($actions['delete'], $actions['create'], $actions['index'], $actions['view'], $actions['update']);
        return $actions;
    }

	public function afterAction ( $action , $result )
	{
		$result = parent::afterAction ( $action , $result ); // TODO: Change the autogenerated stub
		User::updateAll (['last_activity' => date ('Y-m-d H:i:s')], 'id = :id',[':id' => Yii::$app->user->id]);
		return $result;
	}

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['contentNegotiator']['formats'] = [
            'application/json' => Response::FORMAT_JSON
        ];

        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                HttpBasicAuth::className(),
                HttpBearerAuth::className(),
                QueryParamAuth::className(),
            ],
        ];

	    $behaviors['access'] = [
		    'class' => AccessControl::className (),
		    'rules' => [
			    [
				    'allow' => true,
				    'matchCallback' => function ($rule, $action) {
					    return !(Yii::$app->user->identity->status !== 10);
				    }
			    ]
		    ]
	    ];

	    return $behaviors;
    }

        public function actionIndex($lat, $long)
    {
        if(strpos($lat, ',') || strpos($long,',')){
			return [
				'status' => 'bad request',
				'code' => Yii::$app->response->statusCode = 400,
				'message' => 'latitude atau longitude tidak boleh kosong'
			];
        }

	    $toUser = Conversation::find()->select('to')->where([ 'from' => \Yii::$app->user->id ])->asArray()->column();
	    $fromUser = Conversation::find()->select('from')->where([ 'to' => \Yii::$app->user->id ])->asArray()->column();
	    $skip = Skip::find()->select('story_id')->where([ 'user_id' => \Yii::$app->user->id , 'status' => 1 ])->asArray()->column();
	    $array = array_unique (ArrayHelper::merge ($toUser, $fromUser));
	    $conversation = Conversation::find ()->select(['story_id'])->where(['to' => Yii::$app->user->id])->orWhere (['from' => Yii::$app->user->id])->asArray()->column ();

        $query = Stories::find()
	        ->select([
	        	'stories.file_name',
		        'stories.audio_file',
		        'stories.time',
		        'stories.status',
		        'stories.latitude',
		        'stories.longitude',
		        'stories.user_id',
		        'stories.story_id',
		        'distance' => new Expression(" ROUND(1.609344 * 3956 * acos( cos( radians({$lat}) ) * cos( radians(stories.latitude) ) * cos( radians(stories.longitude) - radians({$long}) ) + sin( radians({$lat}) ) * sin( radians(stories.latitude) ) ) ,8)")
	        ])
            ->andFilterWhere(['NOT IN', 'story_id', ArrayHelper::merge ($skip, $conversation)])
            ->andFilterWhere(['NOT IN', 'user_id', Yii::$app->user->id])
	        //->andFilterWhere(['NOT IN', 'user_id', $array])
	        ->andFilterWhere(['status' => 1, 'is_delete' => 0])
            ->andFilterWhere(['>=', 'time', new Expression('DATE_SUB(NOW(), INTERVAL 7 DAY)')])
            ->orderBy(new Expression('rand()'));

        $provider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 1
            ]
        ]);

        return $provider;
    }

	public function actionMyStory()
	{
		$query = Stories::find ()
			->where([
				'user_id' => Yii::$app->user->id,
				'status' => 1,
				'is_delete' => 0
			])
			->andWhere(['>=', 'time', new Expression('DATE_SUB(NOW(), INTERVAL 24 HOUR)')]);

		$provider = new ActiveDataProvider([
			'query' => $query,
			'sort' => [
				'defaultOrder' => [
					'time' => SORT_DESC
				]
			]
		]);

		$model = $provider->getModels();
		foreach ($model as $value){
			$data [] = $value->toArray([
				'story_id',
				'audio',
				'duration',
				'date',
				'time_ago'
			],[
				'view',
				'reply',
				'isExpired'
			]);
		}
		$provider->setModels ($data);
		return $provider;
	}

    public function actionCreate()
    {
        $model  = new Stories;
        $story  = Stories::find()->select('time')->where('user_id = :id',[':id' => Yii::$app->user->id])->limit(1)->orderBy(['time' => SORT_DESC])->one();

        if($story !== null) {
        	$now = time();
        	$expire = strtotime($story->time . ' +5 minutes');

            if ($now <= $expire) {
				return [
					'status' => 'forbidden',
					'code' => Yii::$app->response->statusCode = 403,
					'message' => 'anda tidak dapat membagikan cerita setelam 5 menit.'
				];
            }
        }

        if($model->load(Yii::$app->request->getBodyParams(), '')){
            $model->audio = UploadedFile::getInstanceByName('audio');

            if($model->validate()){
                $model->file_name = uniqid( 'voice_' . date('Y-m-d').'_' , false ) . '.' . $model->audio->extension;
                $model->audio_file = Url::to("@web/audio/{$model->file_name}", 'https');
                $model->size = $model->audio->size;
                
                if($model->save()){
                    $model->audio->saveAs('audio/' . $model->file_name);
                    return [
                        'status' => Yii::$app->response->statusCode = 200,
                        'message' => Yii::t('app', 'You can publish after 5 minutes'),
                        'data'   => $model->toArray()
                    ];
                }
            } else {
                return [
                    'status' => Yii::$app->response->statusCode = 400,
                    'message' => Yii::t('app', 'Bad request'),
                    'data' => $model->errors
                ];
            }
        }  return [];
    }

    public function actionSkip(){
        $model = new Skip;
        if ($model->load(Yii::$app->getRequest()->getBodyParams(), '') && $model->save()) {
            return [
                'status'  => Yii::$app->response->statusCode = 200,
                'message' => Yii::t('app', 'Has been skip')
            ];
        }
        return [];
    }

    public function actionReport(){
        $model = new Report();
        if ($model->load(Yii::$app->getRequest()->getBodyParams(), '') && $model->save()) {
           return [
              'status'  => 'success',
	          'code' => Yii::$app->response->statusCode = 200,
              'message' => 'pelaporan berhasil'
                ];
        } else {
        	return [
        	    'status' => 'bad request',
		        'code' => Yii::$app->response->statusCode = 403,
		        'message' => $model->firstErrors
	        ];
        }
    }

    public function actionReportList()
    {
	    $query = Report::find ();
	    return new ActiveDataProvider( [
		    'query' => $query ,
	    ] );
    }

    public function actionReportBanned()
    {
        $model = Report::findOne(Yii::$app->request->post('id'));
        $model->status = 1;
        if($model->update()){
            return [
                'status'  => 'succes',
	            'code' => Yii::$app->response->statusCode = 200,
                'message' => Yii::t('app', 'Story Has been banned')
            ];
        } return [];
    }

    public function actionDetail($id)
    {
      $model = $this->findModel($id);
      $resp = [
         'status' => 'success',
	     'code' => Yii::$app->response->statusCode = 200,
         'data' => $model->toArray()
      ];
        return $resp;
    }

    public function actionDelete($id)
    {
    	$model = $this->findModel ($id);
    	$model->is_delete = 1;
    	$model->save (false);
    	return [
    		'status' => 'success',
		    'code' => Yii::$app->response->statusCode= 200,
		    'message' => 'Cerita berhasil dihapus'
	    ];
    }

    protected function findModel($id)
    {
	    $model = Stories::findOne(['story_id' => $id, 'status' => 1]);
	    if($model !== null){
		 return $model;
	    }
	    throw new NotFoundHttpException('Kiriman tidak ditemukan.');
    }
}
