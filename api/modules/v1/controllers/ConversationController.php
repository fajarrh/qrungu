<?php

namespace api\modules\v1\controllers;

use common\models\Stories;
use common\models\User;
use Yii;
use yii\data\Pagination;
use yii\db\Query;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;
use yii\rest\ActiveController;
use yii\web\UploadedFile;
use yii\helpers\Url;
use yii\web\Response;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\data\ActiveDataProvider;

use common\models\Conversation;
use common\models\ConversationList;
use common\models\ConversationSearch;
use common\models\UploadForm;

class ConversationController extends ActiveController
{
	public $modelClass = 'common\models\Conversation';
	public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'data',
    ];

	public function actions()
	{
	    $actions = parent::actions();
		   unset($actions['delete'], $actions['create'], $actions['index'], $actions['view'], $actions['update']);
	    return $actions;
	}
	public function afterAction ( $action , $result )
	{
		$result = parent::afterAction ( $action , $result ); // TODO: Change the autogenerated stub
		User::updateAll (['last_activity' => date ('Y-m-d H:i:s')], 'id = :id',[':id' => Yii::$app->user->id]);
		return $result;
	}

	public function behaviors()
	{
	    $behaviors = parent::behaviors();
	    $behaviors['contentNegotiator']['formats'] = [
	    	'application/json' => Response::FORMAT_JSON
	    ];

	    $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                HttpBasicAuth::className(),
                HttpBearerAuth::className(),
                QueryParamAuth::className(),
            ],
        ];

	    $behaviors['access'] = [
	    	'class' => AccessControl::className (),
		    'rules' => [
		    	[
		    		'allow' => true,
				    'matchCallback' => function ($rule, $action) {
					return !(Yii::$app->user->identity->status !== 10);
				    }
			    ]
		    ]
	    ];
	    
	    return $behaviors;
	}

	public function actionIndex()
	{
		$query = Conversation::find ()
			->andFilterWhere ( [ 'from' => Yii::$app->user->id ] )
			->orFilterWhere ( [ 'to' => Yii::$app->user->id  ] )
			->andWhere ('status = 1')
			->orderBy('time DESC')
			->all ();

		$tempData = [];
		foreach ($query as $item) {
			$tempData [] = $item->toArray([ 'count' , 'user' , 'last_reply' ]);
		}
		$tempData2 = ArrayHelper::index($tempData, null, 'user.id');
		$data = [];
		foreach ($tempData2 as $value) {
			$tmpdate = strtotime ($value[0]['last_reply']['date'] . ' ' .$value[0]['last_reply']['time']);
			$arr     = $value[0];

			foreach ($value as $item2){
				$tmpItem = strtotime ($item2['last_reply']['date'] . ' ' .$item2['last_reply']['time']);
				if($tmpItem > $tmpdate){
					$arr = $item2;
				}
			}
			$data[] = $arr;
		}
		return ['data' => $data];
	}

    public function actionReplyStory()
    {
    	$model  = new Conversation;
    	$model->scenario = Conversation::SCENARIO_REPLY_STORY;
        $upload = new UploadForm;

        if($model->load(Yii::$app->request->getBodyParams(),'')){
	        $upload->audio = UploadedFile::getInstanceByName('audio');

        	$valid = $model->validate();
        	$valid = $valid && $upload->validate();

        	if(!$valid){
		        return [
			        'status' => 'bad request',
			        'code' => Yii::$app->response->statusCode = 400,
			        'message' => ArrayHelper::merge ($model->firstErrors, $upload->firstErrors)
		        ];
	        }

	        $send = $upload->conversation();
        	if(!$send){
		        return [
			        'status' => 'bad request',
			        'code' => Yii::$app->response->statusCode = 400,
			        'message' => 'audio gagal dikirim'
		        ];
	        }

	        $transaction = \Yii::$app->db->beginTransaction();
	        try {
		        if($flag = $model->save(false)){
			        $list = new ConversationList;
			        $list->file_name = $upload->name;
			        $list->audio_file = Url::to("@web/conversation/{$list->file_name}", 'https');
			        $list->size = $upload->audio->size;
			        $list->conversation_id = $model->conversation_id;
			        $list->user_id = Yii::$app->user->id;
			        $list->latitude = $model->latitude;
			        $list->longitude = $model->longitude;
			        $list->duration = $model->duration;

			        if(!($flag = $list->save (false))){
				        $transaction->rollBack ();
			        }
		        }

		        if($flag){
			        $transaction->commit();
			        return [
				        'status' => 'success',
				        'code' => Yii::$app->response->statusCode = 200,
			        ];
		        }
	        } catch (Exception $e) {
		        $transaction->rollBack();
		        return [
			        'status'  => 'bad request',
			        'code' => Yii::$app->response->statusCode = 400,
			        'message' => $e->getMessage ()
		        ];
	        }
        }
        return [];
    }

    public function actionReplyConversation()
    {
        $model = new ConversationList;
        $model->scenario = ConversationList::SCENARIO_REPLY;
        $upload = new UploadForm;

        if($model->load(Yii::$app->request->getBodyParams(),'')){
	        $upload->audio = UploadedFile::getInstanceByName('audio');

        	$valid = $model->validate();
        	$valid = $valid && $upload->validate();
        	if($valid){
		        $send = $upload->conversation ();
		        if(!$send){
			        return [
				        'status' => 'bad request',
				        'code' => Yii::$app->response->statusCode = 400,
				        'message' => 'audio gagal dikirim'
			        ];
		        }

		        $model->file_name = $upload->name;
		        $model->audio_file = Url::to("@web/conversation/{$model->file_name}", 'https');
		        $model->size = $upload->audio->size;
		        $model->save();
		        return [
			        'status' => 'success',
			        'code' => Yii::$app->response->statusCode = 200
		        ];
	        } else {
		        return [
			        'status' => 'bad request',
			        'code' => Yii::$app->response->statusCode = 400,
			        'message' => ArrayHelper::merge ($model->firstErrors, $upload->firstErrors)
		        ];
	        }
        } return [];
    }

    public function actionConversationDelete($id)
    {
	    Conversation::updateAll(['status' => 0],['conversation_id' => Conversation::find ()
		    ->where(['from' => Yii::$app->user->id, 'to' => (int) $id])
		    ->orWhere (['from' => (int) $id , 'to' => Yii::$app->user->id])
		    ->andWhere ('status = 1')
		    ->column ()]);
        return [
            'status' => 'success',
            'code' => Yii::$app->response->statusCode = 200
        ];
    }

    public function actionDetail($id, $latitude, $longitude)
    {
    	$model = $this->findModel($id);

    	$lastRecord = ConversationList::find()
	        ->where('list_id = :id',[':id' => ConversationList::find ()->where('conversation_id = :id', [':id' => $id])->max ('list_id')])
		    ->asArray()
	        ->one();

	    if($lastRecord['status'] < 1 && $lastRecord['user_id'] == Yii::$app->user->id){
            ConversationList::updateAll(['status' => 1], ['list_id' => $lastRecord['list_id']]);
        }

	    if($lastRecord == null){
	    	$distance = Yii::$app->status->distance([
	    		'latitude' => $latitude,
			    'longitude' => $longitude
		    ], [
		    	'latitude' => $model->story->latitude,
			    'longitude' => $model->story->longitude
		    ]);
	    } else {
		    $distance = Yii::$app->status->distance([
			    'latitude' => $latitude,
			    'longitude' => $longitude
		    ], [
			    'latitude' => $lastRecord['latitude'],
			    'longitude' => $lastRecord['longitude']
		    ]);
	    }

        $resp = [
            'status' => 'success',
	        'code' => Yii::$app->response->statusCode = 200,
	        'conversation_id' => $model->conversation_id,
            'distance'  => $distance,
	        'can_reply' => !($lastRecord['user_id'] == Yii::$app->user->id) ,
	        'story' => ArrayHelper::merge (ArrayHelper::getValue ($model->story->toArray(['user']), 'user'), $model->story->toArray(['audio','duration', 'date', 'time_ago'], ['is_me'])),
	        'data' => $model->conversationLists
        ];
        return $resp;
    }

    public function actionList($id)
    {
    	$userId = $id;
    	$lastConversation = Conversation::find ()
		    ->where(['from' => Yii::$app->user->id, 'to' => (int) $userId])
		    ->orWhere (['from' => (int) $userId , 'to' => Yii::$app->user->id])
		    ->andWhere ('status = 1')
		    ->max ('conversation_id');

	    $lastRecord = ConversationList::find()
		    ->where('list_id = :id',[':id' => ConversationList::find()->where(['conversation_id' => $lastConversation])->max('list_id')])
		    ->one();

	    if(($lastRecord->status < 1) && ($lastRecord->user_id !== Yii::$app->user->id)){
	    	$arrId = Conversation::find ()
			    ->innerJoinWith ('conversationLists')
			    ->innerJoinWith ('story')
			    ->where(['from' => Yii::$app->user->id, 'to' => (int) $userId])
			    ->orWhere (['from' => (int) $userId , 'to' => Yii::$app->user->id])
			    ->andWhere ('conversation.status = 1')
			    ->column();
		    ConversationList::updateAll (['status' => 1], ['conversation_id' => $arrId]);
	    }

	    $conversation = Conversation::find ()
		    ->innerJoinWith ('conversationLists')
		    ->innerJoinWith ('story')
		    ->where(['from' => Yii::$app->user->id, 'to' => (int) $userId])
		    ->orWhere (['from' => (int) $userId , 'to' => Yii::$app->user->id])
		    ->andWhere ('conversation.status = 1')
		    ->orderBy('conversation.conversation_id ASC')
		    ->all();

    	$data = [];
	    $resp = [];
    	$storyNumber = 0;

    	if($conversation !== null){
		    foreach ($conversation as $index => $item) {
			    $user  [$storyNumber] = ArrayHelper::getValue($item->story->toArray(['user' ]) , 'user');
			    $audio [$storyNumber] = [
				    'audio'        => $item->story->audio_file,
				    'duration'     => $item->story->duration ,
				    'date'         => date( 'Y-m-d' , strtotime ( $item->story->time )) ,
				    'reply_status' => $item->story->user_id === Yii::$app->user->id,
				    'is_me'        => $item->story->user_id === Yii::$app->user->id,
				    'time'         => date( 'H:i:s' , strtotime ( $item->story->time )) ,
				    'time_ago'     => Yii::$app->timeAgo->timeAgo($item->story->time ) ,
				    'is_story'     => true
			    ];
			    $data [] = array_merge( $user[$storyNumber] , $audio[$storyNumber] );
			    $conversationLists = $item->conversationLists;
			    foreach ($conversationLists as $idx => $value) {
				    $data [] = $value->toArray ();
			    }
			    $storyNumber++;
			    unset($conversationLists);
		    }

		    $resp = [
			    'status'          => 'success',
			    'code'            => Yii::$app->response->statusCode = 200,
			    'conversation_id' => (int) $lastConversation,
			    'can_reply'       => !($lastRecord->user_id === Yii::$app->user->id),
			    'reply_status'    => !($lastRecord->user_id === Yii::$app->user->id),
			    'data'            => $data
		    ];
	    }

    	return $resp;
    }

    public function actionTotalNotif()
    {
	    $conversationModel = Conversation::find()
		    ->where(['from' => Yii::$app->user->id])
		    ->orWhere([ 'to' => Yii::$app->user->id])
		    ->andWhere ('status = 1')
		    ->all();

	    $maxId = null;
	    $total = 0;
	    foreach ($conversationModel as $item){
		    $maxId = $item->getConversationLists()->max('list_id');
		    $list  = ConversationList::findOne($maxId);
		    if(($list !== null) && $list->user_id !== Yii::$app->user->id && $list->status === 0) {
			    $total++;
		    }
	    }
	    return [
		    'status' => 'success',
		    'code' => Yii::$app->response->statusCode = 200,
		    'total' => $total
	    ];
    }

    protected function findModel($id)
    {
    	$model = Conversation::find()->where(['conversation_id' => (int) $id, 'status' => 1])->one ();
    	if ($model !== null){
    		return $model;
	    }
    	throw new NotFoundHttpException("percakapan tidak ditemukan");
    }
}