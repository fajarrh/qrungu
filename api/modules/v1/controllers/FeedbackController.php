<?php

namespace api\modules\v1\controllers;

use Yii;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\web\NotFoundHttpException;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;

use common\models\Feedback;
use common\models\User;

class FeedbackController extends ActiveController
{
	public $modelClass = 'common\models\Feedback';
	public $serializer = [
		'class' => 'yii\rest\Serializer',
		'collectionEnvelope' => 'data',
	];

	public function actions()
	{
		$actions = parent::actions();
		unset($actions['delete'], $actions['create'], $actions['index'], $actions['view'], $actions['update']);
		return $actions;
	}

	public function afterAction ( $action , $result )
	{
		$result = parent::afterAction ( $action , $result ); // TODO: Change the autogenerated stub
		User::updateAll (['last_activity' => date ('Y-m-d H:i:s')], 'id = :id',[':id' => Yii::$app->user->id]);
		return $result;
	}

	public function behaviors()
	{
		$behaviors = parent::behaviors();
		$behaviors['contentNegotiator']['formats'] = [
			'application/json' => Response::FORMAT_JSON
		];

		$behaviors['authenticator'] = [
			'class' => CompositeAuth::className(),
			'authMethods' => [
				HttpBasicAuth::className(),
				HttpBearerAuth::className(),
				QueryParamAuth::className(),
			],
		];

		$behaviors['access'] = [
			'class' => AccessControl::className (),
			'rules' => [
				[
					'allow' => true,
					'matchCallback' => function ($rule, $action) {
						return !(Yii::$app->user->identity->status !== 10);
					}
				]
			]
		];
		
		return $behaviors;
	}

	public function actionIndex()
	{
		$searchModel = new Feedback();
		$searchModel->load(Yii::$app->request->queryParams);

		$query = Feedback::find();
		$query->andFilterWhere(['like', 'feedback', $searchModel->feedback]);

		$dataPovider = new ActiveDataProvider([
			'query' => $query,
			'sort' => [
				'defaultOrder' => [
					'created_at' => SORT_DESC
				]
			]
		]);

		return $dataPovider;
	}

	public function actionCreate()
	{
		$model = new Feedback();
		if($model->load(Yii::$app->request->bodyParams, '') && $model->save()){
			return[
				'status' => 'success',
				'code' => Yii::$app->response->statusCode = 200,
				'message' => 'feedback diterima'
			];
		} else {
			return [
				'status' => 'bad request',
				'code' => Yii::$app->response->statusCode = 400,
				'message' => $model->firstErrors
			];
		}
	}

	public function actionDelete($id)
	{
		$model = $this->findModel($id);
		if($model->delete()){
			return[
				'status' => 'success',
				'code' => Yii::$app->response->statusCode = 200,
			];
		}
		return [];
	}

	public function actionView($id)
	{
		$model = $this->findModel($id);
		return [
			'success' => 'success',
			'code' => Yii::$app->response->statusCode = 200,
			'data' => $model->toArray()
		];
	}

	protected function findModel($id)
	{
		$model = Feedback::findOne($id);
		if ($model !== null){
			return $model;
		}
		throw new NotFoundHttpException("feedback tidak ditemukan");
	}

}
