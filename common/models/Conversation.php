<?php

namespace common\models;

use Yii;
use yii\db\Expression;
use yii\helpers\Url;
use yii\web\Link;

/**
 * This is the model class for table "conversation".
 *
 * @property int $conversation_id
 * @property int $story_id
 * @property int $created_by
 * @property string $time
 * @property int $status
 * @property Stories $story
 * @property User $createdBy
 * @property ConversationList[] $conversationLists
 * @property int $from
 * @property int $to
 */
class Conversation extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */

    const SCENARIO_REPLY_STORY = 'reply-story';
    public $latitude;
    public $longitude;
	public $duration;

    public static function tableName()
    {
        return 'conversation';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['story_id', 'latitude', 'longitude', 'duration'], 'required', 'on' => self::SCENARIO_REPLY_STORY],
            [['story_id', 'from', 'to', 'status'], 'integer'],
	        ['status','default', 'value' => 1],
	        ['status', 'in', 'range' => [0,1]],
            ['from', 'default', 'value' => Yii::$app->user->id],
            [['time', 'longitude', 'latitude'], 'safe'],
            [['story_id'], 'exist', 'skipOnError' => true, 'targetClass' => Stories::className(), 'targetAttribute' => ['story_id' => 'story_id']],
            [['from'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['from' => 'id']],
            [['to'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['to' => 'id']],
        ];
    }

    public function scenarios ()
    {
	    $scenarios =  parent::scenarios (); // TODO: Change the autogenerated stub
	    $scenarios[self::SCENARIO_REPLY_STORY] = ['story_id', 'from', 'to', 'latitude', 'longitude', 'duration'];
        return $scenarios;
    }

	/**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'conversation_id' => Yii::t('app', 'Conversation ID'),
            'story_id' => Yii::t('app', 'Story ID'),
            'from' => Yii::t('app', 'From User'),
            'time' => Yii::t('app', 'Time'),
            'status' => Yii::t('app', 'Status'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStory()
    {
        return $this->hasOne(Stories::className(), ['story_id' => 'story_id']);
    }

     public function getSource()
    {
        return $this->hasOne(Stories::className(), ['story_id' => 'story_id'])->select(['stories.file_name', 'stories.time', 'stories.status', 'stories.latitude', 'stories.longitude', 'stories.user_id', 'stories.story_id', 'distance' => new Expression(" ROUND(1.609344 * 3956 * acos( cos( radians({$this->latitude}) ) * cos( radians(stories.latitude) ) * cos( radians(stories.longitude) - radians({$this->longitude}) ) + sin( radians({$this->latitude}) ) * sin( radians(stories.latitude) ) ) ,8)")]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFrom0()
    {
        return $this->hasOne(User::className(), ['id' => 'from']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTo0()
    {
        return $this->hasOne(User::className(), ['id' => 'to']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getConversationLists()
    {
        return $this->hasMany(ConversationList::className(), ['conversation_id' => 'conversation_id'])->orderBy(['time' => SORT_ASC]);
    }

    public function beforeSave ( $insert )
    {
    	if($insert){
    		$query = Stories::find()->select('user_id')->where('story_id = :id', [':id' => $this->story_id])->asArray()->one();
	        $this->to = $query['user_id'];
    	}
	    return parent::beforeSave( $insert ); // TODO: Change the autogenerated stub
    }

	public function afterSave ( $insert , $changedAttributes )
    {
    	if($insert){
    		if($this->scenario === self::SCENARIO_REPLY_STORY){
			    Yii::$app->status->pushNotif($this->to, $this->conversation_id, [
				    'type' => 'story'
			    ]);

			    self::updateAll ([
				    'time' => date ('Y-m-d H:i:s')
			    ], ['conversation_id' => self::find ()
				    ->where(['from' => Yii::$app->user->id, 'to' => $this->story->user_id])
				    ->orWhere (['from' => $this->story->user_id, 'to' => Yii::$app->user->id])
				    ->andWhere ('status = 1')
				    ->column ()
			    ]);
		    }
	    }
	    parent::afterSave ( $insert , $changedAttributes ); // TODO: Change the autogenerated stub
    }

	/**
     * {@inheritdoc}
     * @return ConversationQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ConversationQuery(get_called_class());
    }

    public function fields()
    {
	    return [
		    'conversation_id' ,
		    'count' => function ($model){
	    	    $total = 0;
			    $id = $model->from === Yii::$app->user->id ? $model->to : $model->from;
	    	    $query = Conversation::find ()
			        ->where(['from' => Yii::$app->user->id, 'to' => $id])
			        ->orWhere (['from' => $id, 'to' => Yii::$app->user->id])
			        ->andWhere (['status' => 1])
			        ->all();

	    	    foreach ($query as $index => $value){
	    	    	$total += $value->getConversationLists()->count();
	    	    }

	    	    return (int) $total + 1;
		    },
		    'user' => function ($model){
	    	    $arr = $model->from === Yii::$app->user->id ? $model->to0->toArray(['display_name','age','image','gender','bio'], ['id']) : $model->from0->toArray(['display_name','age','image','gender','bio'], ['id']);
	    	    return $arr;
		    },
		    'last_reply' => function ( $model ) {
			    $query = ConversationList::find()
				    ->where( 'list_id = :id' , [ ':id' => ConversationList::find ()->where('conversation_id = :id', [':id' => $model->conversation_id ])->max ('list_id') ] )
				    ->one();
			    if ( $query !== null) {

				    if( $query->user_id === Yii::$app->user->id){
					    if($query->status === 0){
						    $status = 'belum diputar';
					    } else {
						    $status = 'diputar';
					    }
				    } else {
					    if($query->status === 0){
						    $status = 'balasan baru';
					    } else {
						    $status = '';
					    }
				    }

				    return [
					    'display_name' => $query->user->display_name ,
					    'image' => $query->user->image,
					    'time' => Yii::$app->formatter->asDate ($query->time, 'php:H:i:s'),
					    'time_ago' => Yii::$app->timeAgo->timeAgo($query->time) ,
					    'date' => Yii::$app->formatter->asDate ($query->time, 'php:d-m-Y') ,
					    'status' =>  $status,
					    'audio' => $query->audio_file,
					    'duration' => sprintf("%'.02d", (int) $query->duration),
		    	    	'reply_status' => $query->user_id == Yii::$app->user->id ? false : true
				    ];
			    }
			    return [];
		    } ,
	    ];
    }
}
