<?php

namespace common\models;

use Yii;
use yii\helpers\Url;

/**
 * This is the model class for table "conversation_list".
 *
 * @property int $list_id
 * @property int $conversation_id
 * @property int $user_id
 * @property string $time
 * @property int $status
 * @property string $file_name
 * @property string $latitude
 * @property string $longitude
 * @property string $audio_file;
 * @property int $duration
 * @property Conversation $conversation
 * @property User $user
 * @property int $size
 * @property boolean $is_story
 */
class ConversationList extends \yii\db\ActiveRecord
{
	const SCENARIO_REPLY = 'reply';

	private $temp;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'conversation_list';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['conversation_id', 'latitude', 'longitude'], 'required'],
	        [['conversation_id', 'latitude', 'longitude', 'duration'], 'required', 'on' => self::SCENARIO_REPLY ],
            [['conversation_id', 'user_id', 'status', 'size'], 'integer'],
	        [['longitude', 'latitude'], 'number'],
	        ['duration', 'integer'],
            [['time'], 'safe'],
            [['file_name'], 'string', 'max' => 128],
	        ['audio_file', 'string'],
	        ['status', 'default', 'value' => 0],
	        ['status', 'in', 'range' => [0,1]],
	        ['user_id', 'default', 'value' => Yii::$app->user->id],
	        [['conversation_id'], 'exist', 'skipOnError' => true, 'targetClass' => Conversation::className(), 'targetAttribute' => ['conversation_id' => 'conversation_id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    public function scenarios ()
    {
	    $scenario =  parent::scenarios (); // TODO: Change the autogenerated stub
        $scenario[self::SCENARIO_REPLY] = ['conversation_id', 'latitude', 'longitude', 'duration', 'user_id'];
	    return $scenario;
    }

	/**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'list_id' => Yii::t('app', 'List ID'),
            'conversation_id' => Yii::t('app', 'Conversation ID'),
            'user_id' => Yii::t('app', 'User ID'),
            'time' => Yii::t('app', 'Time'),
            'status' => Yii::t('app', 'Status'),
            'file_name' => Yii::t('app', 'File Name'),
	        'audio_file' => 'Audio File',
	        'latitude' => 'Latitude',
	        'longitude' => 'Longitude'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getConversation()
    {
        return $this->hasOne(Conversation::className(), ['conversation_id' => 'conversation_id'])->onCondition(['conversation.status' => 0]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    private function lastRecord()
    {
	    $model = self::find ()
		    ->select(['user_id'])
		    ->where('list_id = :id',[ ':id' => self::find()->where('conversation_id = :id',[':id' => $this->conversation_id])->max ('list_id') ])
		    ->andWhere (['is_story' => 0])
		    ->asArray()
		    ->one ();
	    return $model['user_id'];
    }

    public function beforeValidate ()
    {
    	if($this->scenario === self::SCENARIO_REPLY){
    		$lastRecord = $this->lastRecord();
    		$this->temp = $lastRecord;

    	    if($lastRecord == Yii::$app->user->id){
    	        $this->addError ('user_id', 'forbidden');
    	    	return false;
	        }
	    }
	    return parent::beforeValidate (); // TODO: Change the autogenerated stub
    }

    public function afterSave ( $insert , $changedAttributes )
    {
    	if($insert){
    		if($this->scenario === self::SCENARIO_REPLY){

			    Yii::$app->status->pushNotif($this->temp, $this->conversation_id, [
				    'type' => 'conversation'
			    ]);
			    Conversation::updateAll ([
			    	'time' => date ('Y-m-d H:i:s')
			    ],
				    ['conversation_id' => Conversation::find ()
					    ->where(['from' => Yii::$app->user->id, 'to' => $this->temp])
					    ->orWhere (['from' => $this->temp, 'to' => Yii::$app->user->id])
					    ->andWhere ('status = 1')
					    ->column ()
				    ]);
		    }
	    }
	    parent::afterSave ( $insert , $changedAttributes ); // TODO: Change the autogenerated stub
    }

	/**
     * {@inheritdoc}
     * @return ConversationListQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ConversationListQuery(get_called_class());
    }

    public function fields()
    {
	    return [
		    //'user_id' ,
		    'display_name' => function ( $model ) {
			    $name = $model->user->display_name;
			    return empty( $name ) ? 'Tanpa Nama' : $name;
		    } ,
		    'image' => function ( $model ) {
			    return $model->user->image;
		    } ,
		    'gender' => function ( $model ) {
			    return $model->user->gender;
		    } ,
		    'audio' => 'audio_file' ,
		    'duration' => function($model){
	    	    return sprintf("%'.02d", (int) $model->duration);
		    },
		    'date' => function ( $model ) {
			    return Yii::$app->formatter->asDate ( $model->time , 'php:d-m-Y' );
		    } ,
		    'reply_status' => function($model){
	    	    return $model->user_id == Yii::$app->user->id ? false : true;
		    },
		    'is_me' => function ($model){
	    	    return Yii::$app->user->id == $model->user_id ? true : false;
		    },
		    'time' => function ( $model ) {
			    return Yii::$app->formatter->asDate ( $model->time , 'php:H:i:s' );
		    } ,
		    'time_ago' => function ( $model ) {
			    return Yii::$app->timeAgo->timeAgo ( $model->time );
		    },
		    'is_story' => function($model){
	    	    return (boolean) $model->is_story;
		    }
	    ];

    }
}
